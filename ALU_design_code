//ALU design code
`define MUL
module NEW_ALU #(parameter OUT=4,parameter CMD_WIDTH=4)
(OPA,OPB,CIN,CLK,RESET,CMD,CE,MODE,IP_VALID,COUT,OFLOW,RES,G,E,L,ERR);
    input [OUT-1:0] OPA,OPB;
    input CLK,RESET,CE,MODE,CIN;
    input [CMD_WIDTH-1:0] CMD;
    input [1:0]IP_VALID;

    output reg COUT;
    output reg OFLOW;
    output reg G;
    output reg E;
    output reg L;
    output reg ERR;

    `ifdef MUL
        output reg[2*OUT:0] RES;
     `else
        output reg[OUT:0] RES;
     `endif
  //reg [IP1:0] OPA_REG, OPB_REG;
  reg [OUT:0] Temp1;
  reg Temp2;

  // FOR SIGNED
  reg  [OUT:0] S_RESULT;
  wire signed [OUT-1:0] S_OPA = OPA;
  wire signed [OUT-1:0] S_OPB = OPB;

  // FOR MULTIPLICATION
  reg [OUT-1:0] OPA_STAGE1, OPB_STAGE1;
  reg [OUT:0]   OPA_STAGE2, OPB_STAGE2;
  reg [2*OUT:0] T1_STAGE3;
//FOR ROTATION
  localparam SHIFT_WIDTH = $clog2(OUT);
  wire [SHIFT_WIDTH-1:0] SHIFT_AMOUNT = OPB[SHIFT_WIDTH-1:0];
  wire INVALID = |OPB[OUT-1:SHIFT_WIDTH];

  always @(posedge CLK or posedge RESET) begin
    if (RESET) begin
      RES   <= {OUT{1'b0}};
      ERR   <= 1'b0;
      OFLOW <= 1'b0;
      COUT  <= 1'b0;
      G     <= 1'b0;
      L     <= 1'b0;
      E     <= 1'b0;
      Temp1 <= {OUT{1'b0}};
      S_RESULT<=0;
      Temp2<=0;
    end
    else if (CE) begin
      RES     <= {OUT{1'b0}};
      ERR     <= 1'b0;
      OFLOW   <= 1'b0;
      COUT    <= 1'b0;
      G       <= 1'b0;
      L       <= 1'b0;
      E       <= 1'b0;
      Temp1   <= {OUT{1'b0}};
      S_RESULT<=0;
      Temp2<=0;

      if (MODE) begin
        case (IP_VALID)
          2'b00: begin
            RES <= {OUT{1'b0}};

          end

          2'b11: begin
            case (CMD)
              4'b0000: begin // ADD
                Temp1 <= OPA + OPB;
                RES <= Temp1;
                Temp2 <= Temp1[4];
                COUT <=Temp2;
              end
              4'b0001: begin // SUB
                Temp1 <= OPA - OPB;
                RES <= Temp1;
                OFLOW <= (OPA<OPB)?1:0;
                //OFLOW <=Temp2;
              end
              4'b0010: begin // ADD + CIN
                Temp1 <= OPA + OPB + CIN;
                RES <= Temp1;
                Temp2 <= Temp1[4];
                COUT <=Temp2;
              end
              4'b0011: begin // SUB - CIN
                Temp1 <= OPA - OPB - CIN;
                RES <= Temp1;
                OFLOW <= (Temp1[4])?1:0;
               // OFLOW <=Temp2;
              end
              4'b1000: begin // CMP
                if (OPA == OPB) E <= 1;
                else if (OPA < OPB) L <= 1;
                else if (OPA > OPB) G <= 1;
                else begin
                  E <= 1'b0;
                  G <= 1'b0;
                  L <= 1'b0;
                end
              end
              4'b1001: begin // INC and MUL (OPA+1)*(OPB+1)
                OPA_STAGE1 = OPA;
                OPB_STAGE1 = OPB;
                OPA_STAGE2 <= OPA_STAGE1 + 1;
                OPB_STAGE2 <= OPB_STAGE1 + 1;
                T1_STAGE3 <= OPA_STAGE2 * OPB_STAGE2;
                RES <= T1_STAGE3;

              end
              4'b1010: begin // (OPA<<1) * OPB
                OPA_STAGE1 = OPA;
                OPB_STAGE1 = OPB;
                OPA_STAGE2 <= OPA_STAGE1 << 1;
                T1_STAGE3 <= OPA_STAGE2 * OPB;
                RES <= T1_STAGE3;

              end
              4'b1011: begin // Signed ADD
                S_RESULT <= S_OPA + S_OPB;
                RES <= S_RESULT;
                OFLOW <= (S_OPA[3] == S_OPB[3]) && (S_RESULT[3] != S_OPA[3]);
             //   OFLOW <= Temp2;
                if (S_OPA == S_OPB) E <= 1;
                else if (S_OPA < S_OPB) L <= 1;
                else G <= 1;
              end
              4'b1100: begin // Signed SUB
                S_RESULT <= S_OPA - S_OPB;
                RES <= S_RESULT;
               OFLOW <= (S_OPA[3] != S_OPB[3]) && (S_RESULT[3] != S_OPA[3]);
              //  OFLOW <= Temp2;
                if (S_OPA == S_OPB) E <= 1;
                else if (S_OPA < S_OPB) L <= 1;
                else G <= 1;
              end
              default: begin

                RES <= {OUT{1'b0}};
              end
            endcase
          end

          2'b10: begin
            case (CMD)
              4'b0100: begin
              Temp1 <= OPA + 1;
              RES <= Temp1;
              Temp2 <= Temp1[4];
                COUT <=Temp2;
              end //INC_A
              4'b0101: begin
              Temp1 <= OPA - 1;
              RES <= Temp1;
              OFLOW<=Temp1[4]?1:0;
              end //DEC_A
              default: RES <= {OUT{1'b0}};
            endcase
          end

          2'b01: begin
            case (CMD)
              4'b0110: begin
              Temp1 <= OPB + 1;
              RES <= Temp1;
              Temp2 <= Temp1[4];
                COUT <=Temp2;
              end//INC_B
              4'b0111: begin
              Temp1 <= OPB - 1;
              RES <= Temp1;
              OFLOW<=Temp1[4]?1:0;
              end //DEC_B
              default: RES <= {OUT{1'b0}};
            endcase
          end

          default: begin end
        endcase
      end // MODE = 1
      else begin
        case (IP_VALID)
          2'b00: begin
            RES <= {OUT{1'b0}};

          end

          2'b11: begin
            case (CMD)
              4'b0000: begin Temp1 <= {1'b0,OPA & OPB}; RES <= Temp1; end //AND
              4'b0001: begin Temp1 <= {1'b0,~(OPA & OPB)}; RES <= Temp1; end //NAND
              4'b0010: begin Temp1 <= {1'b0,OPA | OPB}; RES <= Temp1; end//OR
              4'b0011: begin Temp1 <= {1'b0,~(OPA | OPB)}; RES <= Temp1; end//NOR
              4'b0100: begin Temp1 <= {1'b0,OPA ^ OPB}; RES <= Temp1; end//XOR
              4'b0101: begin Temp1 <= {1'b0,~(OPA ^ OPB)}; RES <= Temp1; end//XNOR
              4'b1100: begin//ROL_A_B
                         if (INVALID)
                                    ERR <= 1;
                                else
                                    Temp1<={1'b0,((OPA << SHIFT_AMOUNT) | (OPA >> (OUT - SHIFT_AMOUNT)))};
                                    RES <= Temp1;
                       end
              4'b1101: begin//ROR_A_B
                         if (INVALID)
                                    ERR <= 1;
                                else
                                    Temp1<={1'b0,((OPA >> SHIFT_AMOUNT) | (OPA << (OUT - SHIFT_AMOUNT)))};
                                    RES <= Temp1;

                       end
              default: begin  RES <= {OUT{1'b0}}; end
            endcase
          end

          2'b10: begin
            case (CMD)
              4'b0110: begin Temp1<={1'b0, ~OPA}; RES<=Temp1;end//NOT_A
              4'b1000: begin Temp1<= {1'b0,OPA>>1}; RES<=Temp1;end//SHRA_1
              4'b1001: begin Temp1<= {1'b0,OPA<<1}; RES<=Temp1; end//SHLA_1
              default: begin  RES <= {OUT{1'b0}}; end
            endcase
          end

          2'b01: begin
            case (CMD)
              4'b0111: begin Temp1<={1'b0,~OPB}; RES<=Temp1; end//NOT_B
              4'b1010: begin Temp1<={1'b0,OPB>>1}; RES<=Temp1; end//SHRB_1
              4'b1011: begin Temp1<={1'b0,OPB<<1}; RES<=Temp1; end//SHLB_1
              default: begin  RES <= {OUT{1'b0}};end
            endcase
          end

          default: begin  RES <= {OUT{1'b0}};end
        endcase
      end // MODE = 0
    end // CE
  end // always
endmodule
